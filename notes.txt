Just to make the definition complete, in the Cartesian coordinate system:
    * the x-axis goes through long,lat (0,0), so longitude 0 meets the equator;
    * the y-axis goes through (0,90);
    * and the z-axis goes through the poles.
The conversion is:
x = R * cos(lat) * cos(lon)
y = R * cos(lat) * sin(lon)
z = R *sin(lat)
The formula for back conversion:
   lat = asin(z / R)
   lon = atan2(y, x)

http://rails.nomad-labs.com/?p=15

Widget.import columns, values, :on_duplicate_key_update => [:price]

http://www.slideshare.net/sabman/rails-gis-hacks-presentation-170907

        for p in @ps
      xml.Point {
        xml.coordinates("#{@p[0]}, #{@p[1]}");
        }
}

      xml.Point {
        xml.coordinates("#{@centre[0]}, #{@centre[1]}");


        text =    "
Centre Lng: #{@centre[0]}
Centre Lat: #{@centre[1]}
X Min: #{@bbox[0]}
Y Min: #{@bbox[1]}
X Max: #{@bbox[2]}
Y Max: #{@bbox[3]}
"

xml.instruct! :xml
xml.kml(:xmlns => "http://earth.google.com/kml/2.2") do
  xml.Document {
    xml.Placemark {
      xml.Snippet(:maxLines => "9") {
        xml.cdata!(text)
      }
      xml.name("cross-hair")
      xml.Style {
        xml.LabelStyle {
          xml.scale(0)
        }
        xml.IconStyle {
          xml.color("ffefebde")
          xml.Icon {
            xml.href("root://icons/palette-3.png")
            xml.x(128)
            xml.y(32)
            xml.w(32)
            xml.h(32)
          }
        }
      }
      @ps.each do |p|
      	xml.Point
        	xml.coordinates("#{p[0]},#{p[1]},0")
      end
    }
  }
end